//
//  HomeInteractorProtocol.swift
//  Shoppe
//
//  Created by Victor Garitskyu on 11.03.2025.
//

import Foundation

protocol HomeInteractorProtocol: AnyObject {
    func fetchCategories()
    func fetchPopularProducts()
    func fetchJustForYouProducts()
    func getAvailableCities() -> [String]
    func getSelectedCity() -> String
    func updateSelectedLocation(_ location: String)
    func updateSelectedCurrency(_ row: Int)
}

class HomeInteractor: HomeInteractorProtocol {
    private let cities = [
        "üá∫üá∏  America ‚Üí $",
        "üá∑üá∫  Russia ‚Üí ‚ÇΩ",
        "üá™üá∫  Europe ‚Üí ‚Ç¨",
        "üåç  Other world ‚Üí $"
    ]
    
    private var selectedCity = "üá∫üá∏  America ‚Üí $"
    
    private let apiService = APIService()
    
    weak var presenter: HomePresenterProtocol?
    
    func fetchCategories() {
        apiService.fetchProducts { [weak self] result in
            guard let self = self else { return }
            
            switch result {
            case .success(let products):
                var categoryDict: [String: (Set<String>, [String], Int)] = [:] // [Category: (Products, Images, Count)]
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for product in products {
                    let category = product.category
                    if categoryDict[category] == nil {
                        categoryDict[category] = (Set([product.title]), [product.localImagePath], 1)
                    } else {
                        categoryDict[category]?.0.insert(product.title)
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
                        if categoryDict[category]?.1.count ?? 0 < 4 {
                            categoryDict[category]?.1.append(product.localImagePath)
                        }
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        categoryDict[category]?.2 += 1
                    }
                }
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ShopCategory
                let categories = categoryDict.map { (category, value) in
                    ShopCategory(
                        title: category,
                        image: value.1.first ?? "testPhotoImage",
                        itemCount: value.2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        subcategoryImages: Array(value.1.prefix(4))
                    )
                }.sorted { $0.title.lowercased() < $1.title.lowercased() }
                
                // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
                let limitedCategories = Array(categories.prefix(6))
                
                DispatchQueue.main.async {
                    self.presenter?.view?.displayCategories(limitedCategories)
                }
                
            case .failure(let error):
                print("Error fetching categories: \(error)")
            }
        }
    }
    
    func fetchPopularProducts() {
        apiService.fetchProducts { [weak self] result in
            switch result {
            case .success(let products):
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è Popular —Å–µ–∫—Ü–∏–∏
                let popularProducts = Array(products.prefix(6))
                DispatchQueue.main.async {
                    self?.presenter?.view?.displayPopularProducts(popularProducts)
                }
            case .failure(let error):
                print("Error fetching popular products: \(error)")
            }
        }
    }
    
    func fetchJustForYouProducts() {
        apiService.fetchProducts { [weak self] result in
            switch result {
            case .success(let products):
                // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è Just For You —Å–µ–∫—Ü–∏–∏
                let startIndex = min(6, products.count)
                let endIndex = min(startIndex + 8, products.count)
                let justForYouProducts = Array(products[startIndex..<endIndex])
                DispatchQueue.main.async {
                    self?.presenter?.view?.displayJustForYouProducts(justForYouProducts)
                }
            case .failure(let error):
                print("Error fetching just for you products: \(error)")
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ presenter
            }
        }
    }
    func getAvailableCities() -> [String] {
        return cities
    }
    
    func getSelectedCity() -> String {
        return selectedCity
    }
    
    func updateSelectedLocation(_ location: String) {
        selectedCity = location
    }
    
    func updateSelectedCurrency(_ row: Int) {
        switch row {
            case 0: CurrencyManager.shared.currentCurrency = "USD"
            case 1: CurrencyManager.shared.currentCurrency = "RUBL"
            case 2: CurrencyManager.shared.currentCurrency = "EUR"
            case 3: CurrencyManager.shared.currentCurrency = "USD"
            default: CurrencyManager.shared.currentCurrency = "USD"
        }
        print("NEW CURRENCY")
        print(CurrencyManager.shared.currentCurrency)
    }
    
    func toggleWishlistStatus(for product: Product) {
        apiService.toggleLike(for: product)
    }
}
